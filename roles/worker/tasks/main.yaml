---
- name: Check if token already exists
  stat:
    path: /tmp/token
  register: token_on_worker

- name: Check if kubeconfig already exists
  stat:
    path: /tmp/kubeconfig.yaml
  register: kubeconfig_on_worker

- name: Copy token to worker
  copy:
    src: ./tmp/token
    dest: /tmp/token
  when: not token_on_worker.stat.exists

- name: Copy kubeconfig to worker
  copy:
    src: ./tmp/kubeconfig.yaml
    dest: /tmp/kubeconfig.yaml
  when: not kubeconfig_on_worker.stat.exists

- name: Read token from file
  slurp:
    src: /tmp/token
  register: k3s_token_raw

- name: Decode token
  set_fact:
    k3s_token: "{{ k3s_token_raw.content | b64decode | trim }}"

- name: Wait for API server to become reachable
  shell: |
    timeout 60 bash -c '
      until curl -k https://{{ hostvars["node1"].ansible_host }}:6443/ping; do
        sleep 3;
      done'
  changed_when: false

- name: Check if K3s agent is already installed
  stat:
    path: /etc/systemd/system/k3s-agent.service
  register: k3s_agent_installed

- name: Install K3s agent
  shell: |
    curl -sfL https://get.k3s.io | K3S_URL=https://{{ hostvars['node1'].ansible_host }}:6443 K3S_TOKEN={{ k3s_token }} sh -
  args:
    executable: /bin/bash
  when: not k3s_agent_installed.stat.exists

- name: Ensure k3s-agent service is enabled and running
  systemd:
    name: k3s-agent
    enabled: true
    state: started

- name: Wait until node joins the cluster
  shell: |
    kubectl get node {{ inventory_hostname }} --kubeconfig=/tmp/kubeconfig.yaml --no-headers
  register: node_check
  retries: 10
  delay: 6
  until: node_check.rc == 0
  changed_when: false
  failed_when: node_check.rc != 0

- name: Get existing labels for worker node
  shell: kubectl get node {{ inventory_hostname }} --kubeconfig=/tmp/kubeconfig.yaml --show-labels
  register: existing_labels
  changed_when: false

- name: Label worker node if not labeled
  shell: >
    kubectl label node {{ inventory_hostname }} monitoring=enabled node-role.kubernetes.io/worker=
  environment:
    KUBECONFIG: /tmp/kubeconfig.yaml
  when: '"monitoring=enabled" not in existing_labels.stdout'

- name: Ensure KUBECONFIG is not already exported in profile
  shell: grep -q 'KUBECONFIG=/tmp/kubeconfig.yaml' /etc/profile.d/kubeconfig.sh
  register: kubeconfig_already_set
  ignore_errors: true
  changed_when: false

- name: Set KUBECONFIG globally for vagrant user
  copy:
    content: 'export KUBECONFIG=/tmp/kubeconfig.yaml'
    dest: /etc/profile.d/kubeconfig.sh
    mode: '0644'
  when: kubeconfig_already_set.rc != 0